
NestedWordAutomaton ia = (
   callAlphabet = {"c" },
   internalAlphabet = {"a" },
   returnAlphabet = {"r" },
   states = {s0 s1 s2 s3 },
   initialStates = {s0 s1 },
   finalStates = {s3 },
   callTransitions = {
      (s0 "c" s1)
      (s1 "c" s1)
      (s2 "c" s1)
   },
   internalTransitions = {
      (s0 "a" s0)
      (s0 "a" s2)
      (s1 "a" s1)
      (s3 "a" s3)
   },
   returnTransitions = {
      (s1 s0 "r" s3)
      (s1 s1 "r" s3)
      (s1 s2 "r" s3)
   }
);

NestedWordAutomaton result = (
   callAlphabet = {"c" },
   internalAlphabet = {"a" },
   returnAlphabet = {"r" },
   states = {s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 },
   initialStates = {s0 },
   finalStates = {s0 s1 s2 s4 s5 s6 },
   callTransitions = {
      (s0 "c" s1)
      (s1 "c" s6)
      (s2 "c" s5)
      (s3 "c" s4)
      (s4 "c" s4)
      (s5 "c" s6)
      (s6 "c" s6)
      (s7 "c" s4)
      (s8 "c" s4)
      (s9 "c" s4)
   },
   internalTransitions = {
      (s0 "a" s2)
      (s1 "a" s1)
      (s2 "a" s2)
      (s3 "a" s3)
      (s4 "a" s4)
      (s5 "a" s5)
      (s6 "a" s6)
      (s7 "a" s7)
      (s8 "a" s8)
      (s9 "a" s9)
   },
   returnTransitions = {
      (s1 s0 "r" s3)
      (s1 s2 "r" s3)
      (s4 s0 "r" s4)
      (s4 s1 "r" s4)
      (s4 s2 "r" s4)
      (s4 s3 "r" s4)
      (s4 s4 "r" s4)
      (s4 s5 "r" s4)
      (s4 s6 "r" s4)
      (s4 s7 "r" s4)
      (s4 s8 "r" s4)
      (s4 s9 "r" s4)
      (s5 s2 "r" s3)
      (s6 s0 "r" s3)
      (s6 s1 "r" s9)
      (s6 s2 "r" s3)
      (s6 s5 "r" s7)
      (s6 s6 "r" s8)
      (s7 s2 "r" s4)
      (s8 s0 "r" s4)
      (s8 s1 "r" s4)
      (s8 s2 "r" s4)
      (s8 s5 "r" s4)
      (s8 s6 "r" s4)
      (s9 s0 "r" s4)
      (s9 s2 "r" s4)
   }
);





NestedWordAutomaton complementNCSB = buchiComplementNCSB(ia);
//NestedWordAutomaton comp = buchiComplementFKV(result);
//NestedWordAutomaton intersect = buchiIntersect(complementNCSB,comp);

//NestedLassoWord lasso = getAcceptedLassoWord(intersect);
//print(lasso);

//assert(buchiAccepts(ia, lasso));

assert (numberOfStates(complementNCSB) == 10);
assert(buchiIsIncluded(result, complementNCSB));
//
assert(buchiIsIncluded(complementNCSB, result));

//-----------------------------------------------


NestedWordAutomaton result1 = (
   callAlphabet = {c },
   internalAlphabet = {a },
   returnAlphabet = {r },
   states = {s0 s1 s2 s3 s4 s5 s6 s7 },
   initialStates = {s0 },
   finalStates = {s0 s1 s4 s5 },
   callTransitions = {
      (s0 c s1)
      (s1 c s1)
      (s2 c s3)
      (s2 c s4)
      (s3 c s6)
      (s4 c s5)
      (s5 c s1)
      (s7 c s3)
      (s7 c s4)
   },
   internalTransitions = {
      (s0 a s2)
      (s1 a s1)
      (s2 a s1)
      (s4 a s1)
      (s5 a s1)
      (s7 a s1)
   },
   returnTransitions = {
      (s1 s0 r s1)
      (s1 s1 r s1)
      (s1 s2 r s1)
      (s1 s3 r s1)
      (s1 s4 r s1)
      (s1 s5 r s1)
      (s1 s7 r s1)
      (s4 s2 r s1)
      (s4 s7 r s1)
      (s6 s3 r s7)
      (s7 s2 r s1)
      (s7 s7 r s1)
   }
);

NestedWordAutomaton result2 = (
   callAlphabet = {c },
   internalAlphabet = {a },
   returnAlphabet = {r },
   states = {s0 s1 s2 s3 s4 s5 s6 s7 },
   initialStates = {s0 },
   finalStates = {s0 s1 s4 s5 },
   callTransitions = {
      (s0 c s1)
      (s1 c s1)
      (s2 c s3)
      (s2 c s4)
      (s3 c s6)
      (s4 c s5)
      (s5 c s1)
      (s7 c s3)
      (s7 c s4)
   },
   internalTransitions = {
      (s0 a s2)
      (s1 a s1)
      (s2 a s1)
      (s4 a s1)
      (s5 a s1)
      (s7 a s1)
   },
   returnTransitions = {
      (s1 s0 r s1)
      (s1 s1 r s1)
      (s1 s2 r s1)
      (s1 s3 r s1)
      (s1 s4 r s1)
      (s1 s5 r s1)
      (s1 s7 r s1)
      (s4 s2 r s1)
      (s4 s7 r s1)
      (s6 s3 r s7)
      (s6 s4 r s7)
      (s7 s2 r s1)
      (s7 s7 r s1)
   }
);

NestedWordAutomaton ia = (
   callAlphabet = {c },
   internalAlphabet = {a },
   returnAlphabet = {r },
   states = {s0 s1 s2 s3 },
   initialStates = {s0 },
   finalStates = {s1 },
   callTransitions = {
      (s1 c s2)
      (s2 c s3)
   },
   internalTransitions = {
      (s0 a s1)
   },
   returnTransitions = {
      (s3 s2 r s1)
   }
);


assert (numberOfStates(result1) == numberOfStates(result2));
assert(buchiIsIncluded(result1, result2));
//
assert(buchiIsIncluded(result2, result1));
complementNCSB
NestedWordAutomaton complementNCSB = buchiComplementNCSB(ia);

assert (numberOfStates(complementNCSB) == numberOfStates(result1));
assert(buchiIsIncluded(result1, complementNCSB));
//
assert(buchiIsIncluded(complementNCSB, result1));


